# This file aims to evaluate the passwords generated by different models (mainly on Hit Rate and repeat rate).

import argparse
import os

parser = argparse.ArgumentParser()
parser.add_argument("--test_file", help="file of test set", type=str, required=True)
parser.add_argument("--gen_path", help="path of generated password", type=str, required=True)
parser.add_argument("--isNormal", action="store_true", help="whether the generated password is in normal method")
args = parser.parse_args()

print("isNormal: ", args.isNormal)
print(type(args.isNormal))

if args.isNormal:
    keyWord = "Normal"
else:
    keyWord = "DC"

print("KeyWord: ", keyWord)

def get_all_files(path):
    files = []
    for root, dirs, filenames in os.walk(path):
        for filename in filenames:
            if keyWord in filename:
                files.append(os.path.join(root, filename))
    return files

gen_files = get_all_files(args.gen_path)
print("Files: ")
for file in gen_files:
    print(file)


def get_gen_passwords(gen_files, isNormal):
    gen_passwords = []
    for gen_file in gen_files:
        if isNormal:
            with open(gen_file, "r") as f:
                for line in f.readlines():
                    try:
                        gen_passwords.append(line.split(" ")[1])
                    except:
                        continue
        else:
            with open(gen_file, "r") as f:
                gen_passwords += f.readlines()
    return gen_passwords

def get_hit_rate(test_file, gen_files):
    hit_num = 0
    gen_passwords = get_gen_passwords(gen_files, args.isNormal)
    gen_passwords = set(gen_passwords)

    with open(test_file, "r") as f:
        test_passwords = f.readlines()
    test_passwords = set(test_passwords)

    for password in gen_passwords:
        if password in test_passwords:
            hit_num += 1
    
    hit_rate = hit_num / len(test_passwords)
    return hit_rate


def get_repeat_rate(gen_files):
    gen_passwords = get_gen_passwords(gen_files, args.isNormal)
    _gen_passwords = set(gen_passwords)
    repeat_rate = 1 - len(_gen_passwords) / len(gen_passwords)
    return repeat_rate

hit_rate = get_hit_rate(args.test_file, gen_files)
repeat_rate = get_repeat_rate(gen_files)
print("Hit Rate: ", hit_rate)
print("Repeat Rate: ", repeat_rate)